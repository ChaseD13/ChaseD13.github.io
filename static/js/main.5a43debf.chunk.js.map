{"version":3,"sources":["components/card.js","App.js","serviceWorker.js","index.js"],"names":["CardBox","props","className","children","Image","src","image","alt","Name","name","Details","details","Star","selected","onClick","f","Card","Array","map","n","i","key","starsSelected","change","id","App","state","restaurants","this","getData","setState","uuid","restaurant","index","OnChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAEMA,EAAU,SAACC,GACf,OACE,yBAAKC,UAAU,aACZD,EAAME,WAKPC,EAAQ,SAACH,GACb,OACE,yBAAKI,IAAKJ,EAAMK,MAAOC,IAAI,OAAOL,UAAU,aAK1CM,EAAO,SAACP,GACZ,OACE,yBAAKC,UAAU,QACZD,EAAMQ,OAKPC,EAAU,SAACT,GACf,OACE,yBAAKC,UAAU,WACZD,EAAMU,UAKPC,EAAO,SAAC,GAAD,QAAGC,gBAAH,aAAmBC,eAAnB,MAA2B,SAAAC,GAAC,OAAEA,GAA9B,SACZ,yBAAKb,UAAYW,EAAY,gBAAkB,OAC1CC,QAASA,KAGTE,EAAO,SAACf,GACZ,OACE,kBAAC,EAAD,KACE,yBAAKC,UAAU,cACb,kBAAC,EAAD,CAAOI,MAAOL,EAAMK,QACpB,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAMO,KAAMR,EAAMQ,QAEpB,kBAAC,EAAD,CAASE,QAASV,EAAMU,UACxB,yBAAKT,UAAU,cACd,YAAIe,MAAM,IAAIC,IAAI,SAACC,EAAGC,GAAJ,OACjB,kBAAC,EAAD,CAAMC,IAAKD,EACLP,SAAUO,EAAEnB,EAAMqB,cAClBR,QAAS,kBAAMb,EAAMsB,OAAOtB,EAAMuB,GAAIJ,EAAE,a,gBC+B3CK,G,kBA7Eb,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KACDyB,MAAM,CACTC,YACA,IAJe,E,kFAUjBC,KAAKC,Y,gCAILD,KAAKE,SAAS,CACZH,YAAY,CACV,CACEH,GAAIO,MACJtB,KAAM,UACNE,QAAS,2CACTL,MAAO,OACPgB,cAAe,GAEjB,CACEE,GAAIO,MACJtB,KAAM,gBACNE,QAAS,uCACTL,MAAO,OACPgB,cAAe,GAEjB,CACEE,GAAIO,MACJtB,KAAM,oBACNE,QAAS,4CACTL,MAAO,OACPgB,cAAe,Q,+BAMdE,EAAIF,GACXM,KAAKE,SACH,YAAIF,KAAKF,MAAMC,aAAaT,IAAI,SAACc,GAC5BA,EAAWR,KAAOA,IACnBQ,EAAWV,cAAgBA,Q,+BAMzB,IAAD,OACP,OACE,yBAAKpB,UAAU,aACZ,YAAI0B,KAAKF,MAAMC,aAAaT,IAAI,SAACc,EAAYC,GAC5C,IAAIxB,EAAOuB,EAAWvB,KAClBH,EAAQ0B,EAAW1B,MACnBK,EAAUqB,EAAWrB,QACrBW,EAAgBU,EAAWV,cAC3BE,EAAKQ,EAAWR,GACpB,OACE,kBAAC,EAAD,CACEH,IAAKY,EACLxB,KAAMA,EACNE,QAASA,EACTL,MAAOA,EACPgB,cAAeA,EACfE,GAAIA,EACJD,OAAQ,SAACC,EAAIF,GAAL,OAAuB,EAAKY,SAASV,EAAIF,a,GArE7Ca,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5a43debf.chunk.js","sourcesContent":["import React from 'react';\n\nconst CardBox = (props) => {\n  return(\n    <div className=\"card-body\">\n      {props.children}\n    </div>\n  )\n}\n\nconst Image = (props) => {\n  return(\n    <img src={props.image} alt=\"Logo\" className=\"picture\">\n    </img>\n  )\n}\n\nconst Name = (props) => {\n  return(\n    <div className=\"name\">\n      {props.name}\n    </div>\n  )\n}\n\nconst Details = (props) => {\n  return(\n    <div className=\"details\">\n      {props.details}\n    </div>\n  )\n}\n\nconst Star = ({ selected=false, onClick=f=>f }) =>\n <div className={(selected) ? \"star selected\" : \"star\"}\n      onClick={onClick}>\n </div>\n\nconst Card = (props) => {\n  return(\n    <CardBox>\n      <div className=\"inner-body\">\n        <Image image={props.image}/>\n        <div className=\"body\">\n          <div className=\"inner-body\">\n            <Name name={props.name}/>\n          </div>\n          <Details details={props.details}/>\n          <div className=\"inner-body\">\n          {[...Array(5)].map((n, i) =>\n            <Star key={i}\n                  selected={i<props.starsSelected}\n                  onClick={() => props.change(props.id, i+1)}\n          />)}\n          </div>\n        </div>\n      </div>\n    </CardBox>\n  )\n}\n\nexport { Card }","import React, { Component } from 'react';\nimport { Card } from './components/card.js'\nimport uuid from 'uuid/v1'\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state={\n      restaurants:\n      [ \n      ]\n    }\n  }\n\n  componentWillMount() {\n    this.getData()\n  }\n\n  getData() {\n    this.setState({\n      restaurants:[\n        {\n          id: uuid(),\n          name: \"Sushi S\",\n          details: \"2301 Moscrop Street, Burnaby, BC V61 23Y\",\n          image: \"null\",\n          starsSelected: 0,\n        },\n        {\n          id: uuid(),\n          name: \"Agra Tandoori\",\n          details: \"1255 Canada Way, Burnaby, BC V61 23Y\",\n          image: \"null\",\n          starsSelected: 0,\n        },\n        {\n          id: uuid(),\n          name: \"Bandidas Taqueria\",\n          details: \"2544 Sanders Avenue, Richmond, BC V6Y 0B5\",\n          image: \"null\",\n          starsSelected: 0,\n        },\n      ]\n    });\n  }\n\n  OnChange(id, starsSelected) {\n    this.setState(\n      [...this.state.restaurants].map((restaurant) => {\n        if(restaurant.id === id) {\n          restaurant.starsSelected = starsSelected\n        }\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"main-body\">\n        {[...this.state.restaurants].map((restaurant, index) => {\n          let name = restaurant.name\n          let image = restaurant.image\n          let details = restaurant.details\n          let starsSelected = restaurant.starsSelected\n          let id = restaurant.id\n          return(\n            <Card\n              key={index}\n              name={name}\n              details={details}\n              image={image}\n              starsSelected={starsSelected}\n              id={id}\n              change={(id, starsSelected) => this.OnChange(id, starsSelected)}\n             />\n          )\n        })}      \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    ReactDOM.render(<App />, document.getElementById('root'))\n  })\n}"],"sourceRoot":""}